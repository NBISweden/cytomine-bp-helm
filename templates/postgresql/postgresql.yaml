{{ if .Values.postgresql.deploy }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "cytomine.name" . }}-postgis
  labels:
    role: postgresql
    app: {{ include "cytomine.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: {{ .Release.Name }}-postgis
    release: {{ .Release.Name }}
spec:
  replicas: 1
  serviceName: {{ include "cytomine.name" . }}-postgis
  selector:
    matchLabels:
      app: {{ template "cytomine.name" . }}-postgis
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        role: postgresql
        app: {{ template "cytomine.name" . }}-postgis
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "cytomine.serviceAccountName" . }}
      {{- with .Values.global.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}-postgis
          image: "{{ .Values.images.postgresql }}"
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          volumeMounts:
            - name: postgres-storage
              mountPath: "/var/lib/postgresql/data"
          env:
          - name: POSTGRES_USER
            value: {{ .Values.postgresql.user }}
          - name: POSTGRES_DB
            value: {{ .Values.postgresql.database }}
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "cytomine.name" . }}-postgresql-secret
                key: password
          # if the persistent volume seems empty, copy the data from the default
          # to the persistent volume, then start postgres using it.
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: {{ .Values.containerSecurity.allowPrivilegeEscalation }}
            privileged: {{ .Values.containerSecurity.privileged }}
          livenessProbe:
            exec:
              command:
              - pg_isready
              - -h
              - localhost
              - -U
              - psql
            initialDelaySeconds: 30
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.postgresql.resources | nindent 12 }}
          readinessProbe:
            exec:
              command:
              - pg_isready
              - -h
              - localhost
              - -U
              - psql
            initialDelaySeconds: 5
            timeoutSeconds: 1
      {{- with .Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        storageClassName: {{ .Values.readOnceStorageClass }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.postgresStorage }}
{{ end }}
